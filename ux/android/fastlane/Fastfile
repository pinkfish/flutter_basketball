# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
import '../../fastlane/fastlane.common'

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

before_all do
  #ensure_git_branch
  #ensure_git_status_clean
  #git_pull
end


platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

   desc "Build and push to play store track"
    private_lane :build_and_push_to_play_store_track do |options|
      release_notes(OS: 'android')
      sh ("cd ../.. && flutter build appbundle --target-platform android-arm,android-arm64,android-x64 --build-name=#{@build_name} --build-number=#{@build_number}")
      upload_to_play_store(
        track: options[:track],
        aab: '../build/app/outputs/bundle/release/app-release.aab',
        json_key_data: ENV['GOOGLE_DEVELOPER_SERVICE_ACCOUNT_ACTOR_FASTLANE'],
        #skip_upload_screenshots: false,
        #skip_upload_images: false
      )
      tag_branch(OS: "android")
    end

   desc "Build and push to play store track"
    private_lane :build_and_push_to_play_store_track_github do |options|
      github_api_token = ENV["FL_GITHUB_RELEASE_API_TOKEN"]
      UI.user_error!("Please provide a GitHub API token using `FL_GITHUB_RELEASE_API_TOKEN`") if github_api_token.to_s.length == 0
      # @build_number=number_of_commits()

      # Use the github run number + 300 to be past the existing build numbers.
      @build_number = ENV["GITHUB_RUN_NUMBER"].to_i + 300
      puts @build_number

      @build_name=options[:version].delete("v")
      release=get_github_release(url: "pinkfish/flutter_basketball", version: options[:version], api_token: github_api_token)
      body = release["body"]
      File.write("#{Dir.pwd}/metadata/android/en-US/changelogs/#{@build_number}.txt", "#{body[0,500]}")
      puts body
      #begin
      # git_add(path:"#{Dir.pwd}/metadata/android/en-US/changelogs/#{@build_number}.txt")
      #rescue => error
      #   puts error
      #   puts "File already added"
      #end

      #begin
      #  git_commit(path: ["#{Dir.pwd}/metadata/android/en-US/changelogs/#{@build_number}.txt"],
      #           message: "#{@build_name} release notes update")
      #rescue => error
      #   puts error
      #   puts "Failed to commit stuff"
      #end

      #begin
      #  add_git_tag(
      #    tag: options[:version],
      #    force: true,
      #  )
      #  push_to_git_remote(tags: true, force: true)
      #rescue => error
      #  puts error
      #  puts "Failed to update git tag"
      #end


      sh ("cd ../.. && flutter build appbundle --target-platform android-arm,android-arm64,android-x64 --build-name=#{@build_name} --build-number=#{@build_number}")
      upload_to_play_store(
        track: options[:track],
        aab: '../build/app/outputs/bundle/release/app-release.aab',
        json_key_data: ENV['GOOGLE_DEVELOPER_SERVICE_ACCOUNT_ACTOR_FASTLANE'],
        #skip_upload_screenshots: false,
        #skip_upload_images: false
      )
    end


  #desc "Submit a new Beta Build to Crashlytics Beta"
  #lane :crashalytics do
  #  gradle(task: "clean assembleRelease")
  #   firebase_app_distribution(
  #               app: "1:27184933338:android:31052f5bf767ef8daff8e3",
  #              testers: "pinkfishfrog@gmail.com",
  #              apk_path: "#{apk_path}",
  #              release_notes: "The best bits!",
  #          )
  #end

  desc "Submit a new Beta Build to App store"
  lane :beta do
      build_and_push_to_play_store_track(track: "beta")
  end

  desc "Submit a new Alpha Build to App store"
  lane :alpha do |options|
      puts options[:version]
      build_and_push_to_play_store_track_github(track: "alpha", version: options[:version])
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
